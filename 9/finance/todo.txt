TODO

(*done)

admin, satoshi
tyler, *chrome

*csv to db

*portfolio table left half only
   1st column left align
   all others right align
   last updated note for UX (data may be stale)
   buy/sell uses local last price for develop
   call for quote on button refresh

*if no holdings, no refresh button

more jinja documentation

when to redirect, when to render templ?

impl binary search for leaderboard

fix unncecessarily long float nums - at most 2 decimals

dark mode toggle
 if box ticked / switch flipped, find elements by id, replace tags with <tag class="dark">
	css dark class : background, text color etc

local time (good morning, evening, etc)

*read apikey from txt file

clean up/optimize select statements


*re impl portfolio list and watch list
streamline quote flow
 need watch button upon /quoted without having to retype symbol
sell - symbol is a drop down of user holdings


*api and lookups
*manual quote refresh - post method on / route
   persist recent quotes for portfolio - "refresh" also updates assets tb

*flash errs
 flash success confirms
 flash price quotes?

*create holdings table
   sum in app.py - net liquidation val

*watching: symbol, name, price

*history table

to implement:
sell - select list of user holdings

*buy - green
 *check ticker against our db
 *all in (max) btn
 input cash value

quote flow: most streamlined
 autofocus input box - symbol or name
  on submit - add to watch (optional, can be swapped for quote)
 listen for key down - store string in text field
 db query for symbol=str or name is like
 limit 1 order by recent trade time for this user
 render table row with quote button
 on quote press, render list item above text field
 if is in watch - render text
 else on watch pressed, add to holdings, say done/added
 quoted render text above. js listen for div id=quoted, insert symbol into input


buy flow:
form get symbol, shares
quote = lookup(symbol)
 remember price
check user cash
update users set cash
db select asset id for symbol
if none, insert new asset, get asset id
 else update asset price
db select holdings by asset id, user id
if none, insert new holding, else update holdings
db insert trade


*sell - red
   can have a drop down of user holdings - good UX

sell flow:
req form get symbol, shares
 advanced: (dynamic) drop down list of user holdings
 max button - sell all symbol
lookup symbol, get price
check user current shares
 db select assets by symbol, get asset id
 db select holdings by asset id, user id, get qty
decr user share qty
figure val = shares*price, credit cash w value
update holdings set qty by asset id, user id
update assets set price by asset id
update users set cash
insert new trade


home flow:
if user id is 1, render admin template
 has cash page - crud privilege via web app

*if holdings is none, skip portfolio table, no net liq?
else normal config
*for row in holding, if qty>0, then portfolio table
 else watch list

*history

*not impl'd apology - new image
   done, but failed to emulate original apology

configure memegen

backup to github? created repo in littledebian, gave val push permission
unique column constraints on sql - logic done by app.py


error checking flow:
 register/login:
  no username, no pass, no pass match
 buy:
  no symbol, no shares, low cash
 sell:
  no symbol, no shares, not owned, low shares
 quote - None found
 watch/unwatch
 history
 leaders - publish to social
 dark mode

extras
 *add watchlist - same as holdings table w qty=0
 *remove from watch list, delete from hldings
 edge case: watching is a special case of porfolio

leaderboard - visible to unregistered users
 select count of all users - your table lenth
  figure sum of mkt value for holdings by user, sort descending
 i|name|largestholding|portfolio value
 easter egg - text disclaimer

quick search symbol on home

expander table on home with option to quick buy/sell
 share count input field, with exponent selector 10, 100, 1000
 if order size <101, flash success, else flash executed

